// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	entity "github.com/akubi0w1/golang-sample/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockTag is a mock of Tag interface.
type MockTag struct {
	ctrl     *gomock.Controller
	recorder *MockTagMockRecorder
}

// MockTagMockRecorder is the mock recorder for MockTag.
type MockTagMockRecorder struct {
	mock *MockTag
}

// NewMockTag creates a new mock instance.
func NewMockTag(ctrl *gomock.Controller) *MockTag {
	mock := &MockTag{ctrl: ctrl}
	mock.recorder = &MockTagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTag) EXPECT() *MockTagMockRecorder {
	return m.recorder
}

// CreateOrGetMultiple mocks base method.
func (m *MockTag) CreateOrGetMultiple(ctx context.Context, tags []string) (entity.TagList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrGetMultiple", ctx, tags)
	ret0, _ := ret[0].(entity.TagList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrGetMultiple indicates an expected call of CreateOrGetMultiple.
func (mr *MockTagMockRecorder) CreateOrGetMultiple(ctx, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrGetMultiple", reflect.TypeOf((*MockTag)(nil).CreateOrGetMultiple), ctx, tags)
}
