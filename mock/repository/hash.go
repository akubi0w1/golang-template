// Code generated by MockGen. DO NOT EDIT.
// Source: hash.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHash is a mock of Hash interface.
type MockHash struct {
	ctrl     *gomock.Controller
	recorder *MockHashMockRecorder
}

// MockHashMockRecorder is the mock recorder for MockHash.
type MockHashMockRecorder struct {
	mock *MockHash
}

// NewMockHash creates a new mock instance.
func NewMockHash(ctrl *gomock.Controller) *MockHash {
	mock := &MockHash{ctrl: ctrl}
	mock.recorder = &MockHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHash) EXPECT() *MockHashMockRecorder {
	return m.recorder
}

// GenerateHashPassword mocks base method.
func (m *MockHash) GenerateHashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHashPassword indicates an expected call of GenerateHashPassword.
func (mr *MockHashMockRecorder) GenerateHashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashPassword", reflect.TypeOf((*MockHash)(nil).GenerateHashPassword), password)
}

// ValidatePassword mocks base method.
func (m *MockHash) ValidatePassword(hashPassword, rawPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", hashPassword, rawPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword.
func (mr *MockHashMockRecorder) ValidatePassword(hashPassword, rawPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockHash)(nil).ValidatePassword), hashPassword, rawPassword)
}
