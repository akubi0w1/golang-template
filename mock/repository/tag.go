// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/akubi0w1/golang-sample/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockTag is a mock of Tag interface.
type MockTag struct {
	ctrl     *gomock.Controller
	recorder *MockTagMockRecorder
}

// MockTagMockRecorder is the mock recorder for MockTag.
type MockTagMockRecorder struct {
	mock *MockTag
}

// NewMockTag creates a new mock instance.
func NewMockTag(ctrl *gomock.Controller) *MockTag {
	mock := &MockTag{ctrl: ctrl}
	mock.recorder = &MockTagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTag) EXPECT() *MockTagMockRecorder {
	return m.recorder
}

// FindByIDs mocks base method.
func (m *MockTag) FindByIDs(ctx context.Context, ids []int) (entity.TagList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, ids)
	ret0, _ := ret[0].(entity.TagList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockTagMockRecorder) FindByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockTag)(nil).FindByIDs), ctx, ids)
}

// FindByTags mocks base method.
func (m *MockTag) FindByTags(ctx context.Context, tags []string) (entity.TagList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTags", ctx, tags)
	ret0, _ := ret[0].(entity.TagList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTags indicates an expected call of FindByTags.
func (mr *MockTagMockRecorder) FindByTags(ctx, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTags", reflect.TypeOf((*MockTag)(nil).FindByTags), ctx, tags)
}

// InsertBulk mocks base method.
func (m *MockTag) InsertBulk(ctx context.Context, tags entity.TagList) (entity.TagList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBulk", ctx, tags)
	ret0, _ := ret[0].(entity.TagList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBulk indicates an expected call of InsertBulk.
func (mr *MockTagMockRecorder) InsertBulk(ctx, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBulk", reflect.TypeOf((*MockTag)(nil).InsertBulk), ctx, tags)
}

// IsExist mocks base method.
func (m *MockTag) IsExist(ctx context.Context, tag string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", ctx, tag)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExist indicates an expected call of IsExist.
func (mr *MockTagMockRecorder) IsExist(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockTag)(nil).IsExist), ctx, tag)
}
